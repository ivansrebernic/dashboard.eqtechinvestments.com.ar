-- Role System Setup Script\n-- Run this script in your Supabase SQL Editor to set up the role system\n\n-- Drop existing objects if they exist (for clean reinstall)\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;\nDROP FUNCTION IF EXISTS public.handle_new_user();\nDROP FUNCTION IF EXISTS public.user_has_role(UUID, TEXT);\nDROP FUNCTION IF EXISTS public.get_user_role(UUID);\nDROP FUNCTION IF EXISTS public.is_admin(UUID);\nDROP FUNCTION IF EXISTS public.update_updated_at_column();\nDROP TRIGGER IF EXISTS update_user_roles_updated_at ON public.user_roles;\nDROP TABLE IF EXISTS public.user_roles;\n\n-- Create user roles table\nCREATE TABLE IF NOT EXISTS public.user_roles (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  role TEXT NOT NULL CHECK (role IN ('basic', 'admin')),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_by UUID REFERENCES auth.users(id),\n  \n  -- Ensure one role per user\n  UNIQUE(user_id)\n);\n\n-- Create indexes for faster lookups\nCREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON public.user_roles(user_id);\nCREATE INDEX IF NOT EXISTS idx_user_roles_role ON public.user_roles(role);\n\n-- Enable Row Level Security\nALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;\n\n-- Drop existing policies\nDROP POLICY IF EXISTS \"Users can read own role\" ON public.user_roles;\nDROP POLICY IF EXISTS \"Admins can read all roles\" ON public.user_roles;\nDROP POLICY IF EXISTS \"Admins can manage roles\" ON public.user_roles;\n\n-- RLS Policies\n-- Users can read their own role\nCREATE POLICY \"Users can read own role\" ON public.user_roles\n  FOR SELECT USING (auth.uid() = user_id);\n\n-- Admins can read all roles\nCREATE POLICY \"Admins can read all roles\" ON public.user_roles\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM public.user_roles \n      WHERE user_id = auth.uid() AND role = 'admin'\n    )\n  );\n\n-- Only admins can insert/update/delete roles\nCREATE POLICY \"Admins can manage roles\" ON public.user_roles\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM public.user_roles \n      WHERE user_id = auth.uid() AND role = 'admin'\n    )\n  );\n\n-- Function to automatically assign basic role to new users\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER AS $$\nBEGIN\n  INSERT INTO public.user_roles (user_id, role)\n  VALUES (NEW.id, 'basic');\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Trigger to auto-assign role on user creation\nCREATE OR REPLACE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();\n\n-- Function to check if user has specific role\nCREATE OR REPLACE FUNCTION public.user_has_role(user_uuid UUID, required_role TEXT)\nRETURNS BOOLEAN AS $$\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM public.user_roles \n    WHERE user_id = user_uuid AND role = required_role\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to get user role\nCREATE OR REPLACE FUNCTION public.get_user_role(user_uuid UUID DEFAULT auth.uid())\nRETURNS TEXT AS $$\nDECLARE\n  user_role TEXT;\nBEGIN\n  SELECT role INTO user_role\n  FROM public.user_roles\n  WHERE user_id = user_uuid;\n  \n  RETURN COALESCE(user_role, 'basic');\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to check if current user is admin\nCREATE OR REPLACE FUNCTION public.is_admin(user_uuid UUID DEFAULT auth.uid())\nRETURNS BOOLEAN AS $$\nBEGIN\n  RETURN public.user_has_role(user_uuid, 'admin');\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Update trigger for updated_at\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER update_user_roles_updated_at\n  BEFORE UPDATE ON public.user_roles\n  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\n\n-- Insert a default admin user (OPTIONAL - replace with your email)\n-- UNCOMMENT AND MODIFY THE EMAIL BELOW TO CREATE AN ADMIN USER:\n-- INSERT INTO public.user_roles (user_id, role, created_by)\n-- SELECT \n--   id, \n--   'admin',\n--   id\n-- FROM auth.users \n-- WHERE email = 'your-admin-email@example.com'\n-- ON CONFLICT (user_id) DO UPDATE SET \n--   role = 'admin',\n--   updated_at = NOW();\n\n-- Verification queries (uncomment to test)\n-- SELECT 'Setup completed successfully!' as status;\n-- SELECT count(*) as total_users FROM auth.users;\n-- SELECT role, count(*) as count FROM public.user_roles GROUP BY role;\n-- SELECT email, ur.role FROM auth.users u LEFT JOIN public.user_roles ur ON u.id = ur.user_id;\n\nCOMMIT;\n\n-- INSTRUCTIONS:\n-- 1. Run this script in your Supabase SQL Editor\n-- 2. Optionally uncomment and modify the admin user creation section\n-- 3. Test the system by creating a new user account\n-- 4. Check that the new user gets assigned the 'basic' role automatically\n-- 5. Use the admin interface to promote users to 'admin' role as needed"